# Obstacle Sensing Robot
  An autonomous robot that detects and avoids obstacles using ultrasonic sensors
  Authors: Roshni N Kumar, Roshan Jogi A S, Sumanth N M
  Supervisor: Prof. Ashwini C
  Institution: Sapthagiri College of Engineering
  Academic Year: 2022-2023
 

#include <Servo.h>

// Pin definitions for ultrasonic sensors
#define TRIG_PIN_FRONT 2
#define ECHO_PIN_FRONT 3
#define TRIG_PIN_LEFT 4
#define ECHO_PIN_LEFT 5
#define TRIG_PIN_RIGHT 6
#define ECHO_PIN_RIGHT 7

// Pin definitions for motors
#define LEFT_MOTOR_PIN1 8
#define LEFT_MOTOR_PIN2 9
#define RIGHT_MOTOR_PIN1 10
#define RIGHT_MOTOR_PIN2 11
#define LEFT_MOTOR_ENABLE 12
#define RIGHT_MOTOR_ENABLE 13

// Servo motor for sensor rotation (optional)
#define SERVO_PIN A0
Servo sensorServo;

// Configuration constants
const int THRESHOLD_DISTANCE = 20; // Minimum distance to maintain (in cm)
const int MOTOR_SPEED = 200;       // Motor speed (0-255)
const int TURN_DELAY = 500;        // Turn duration in milliseconds
const int SCAN_DELAY = 100;        // Delay between sensor readings

// Global variables for distance measurements
int frontDistance = 0;
int leftDistance = 0;
int rightDistance = 0;

void setup() {
  // Initialize serial communication for debugging
  Serial.begin(9600);
  
  // Initialize ultrasonic sensor pins
  pinMode(TRIG_PIN_FRONT, OUTPUT);
  pinMode(ECHO_PIN_FRONT, INPUT);
  pinMode(TRIG_PIN_LEFT, OUTPUT);
  pinMode(ECHO_PIN_LEFT, INPUT);
  pinMode(TRIG_PIN_RIGHT, OUTPUT);
  pinMode(ECHO_PIN_RIGHT, INPUT);
  
  // Initialize motor pins
  pinMode(LEFT_MOTOR_PIN1, OUTPUT);
  pinMode(LEFT_MOTOR_PIN2, OUTPUT);
  pinMode(RIGHT_MOTOR_PIN1, OUTPUT);
  pinMode(RIGHT_MOTOR_PIN2, OUTPUT);
  pinMode(LEFT_MOTOR_ENABLE, OUTPUT);
  pinMode(RIGHT_MOTOR_ENABLE, OUTPUT);
  
  // Initialize servo motor
  sensorServo.attach(SERVO_PIN);
  sensorServo.write(90); // Center position
  
  // Initial delay to stabilize
  delay(1000);
  
  Serial.println("Obstacle Sensing Robot Initialized");
  Serial.println("Starting autonomous navigation...");
}

void loop() {
  // Read distances from all three sensors
  frontDistance = getDistance(TRIG_PIN_FRONT, ECHO_PIN_FRONT);
  leftDistance = getDistance(TRIG_PIN_LEFT, ECHO_PIN_LEFT);
  rightDistance = getDistance(TRIG_PIN_RIGHT, ECHO_PIN_RIGHT);
  
  // Print sensor readings for debugging
  Serial.print("Front: ");
  Serial.print(frontDistance);
  Serial.print(" cm, Left: ");
  Serial.print(leftDistance);
  Serial.print(" cm, Right: ");
  Serial.print(rightDistance);
  Serial.println(" cm");
  
  // Decision making based on sensor readings
  if (frontDistance > THRESHOLD_DISTANCE && 
      leftDistance > THRESHOLD_DISTANCE && 
      rightDistance > THRESHOLD_DISTANCE) {
    // Path is clear - move forward
    moveForward();
    Serial.println("Moving forward - Path clear");
  }
  else if (frontDistance <= THRESHOLD_DISTANCE) {
    // Obstacle in front - decide which way to turn
    stopMotors();
    delay(200);
    
    if (leftDistance > rightDistance && leftDistance > THRESHOLD_DISTANCE) {
      // Turn left
      turnLeft();
      Serial.println("Obstacle ahead - Turning left");
    }
    else if (rightDistance > leftDistance && rightDistance > THRESHOLD_DISTANCE) {
      // Turn right
      turnRight();
      Serial.println("Obstacle ahead - Turning right");
    }
    else {
      // Both sides blocked - reverse and turn
      moveBackward();
      delay(500);
      turnRight(); // Default turn direction
      Serial.println("Obstacle ahead and sides blocked - Reversing and turning");
    }
  }
  else if (leftDistance <= THRESHOLD_DISTANCE) {
    // Obstacle on left - turn right
    turnRight();
    Serial.println("Obstacle on left - Turning right");
  }
  else if (rightDistance <= THRESHOLD_DISTANCE) {
    // Obstacle on right - turn left
    turnLeft();
    Serial.println("Obstacle on right - Turning left");
  }
  
  delay(SCAN_DELAY);
}

// Function to measure distance using ultrasonic sensor
int getDistance(int trigPin, int echoPin) {
  long duration;
  int distance;
  
  // Clear the trigger pin
  digitalWrite(trigPin, LOW);
  delayMicroseconds(2);
  
  // Send ultrasonic pulse
  digitalWrite(trigPin, HIGH);
  delayMicroseconds(10);
  digitalWrite(trigPin, LOW);
  
  // Read the echo pin
  duration = pulseIn(echoPin, HIGH);
  
  // Calculate distance in centimeters
  distance = duration * 0.034 / 2;
  
  // Return valid distance (limit to reasonable range)
  if (distance > 400 || distance < 2) {
    return 400; // Return max distance if out of range
  }
  
  return distance;
}

// Motor control functions
void moveForward() {
  digitalWrite(LEFT_MOTOR_PIN1, HIGH);
  digitalWrite(LEFT_MOTOR_PIN2, LOW);
  digitalWrite(RIGHT_MOTOR_PIN1, HIGH);
  digitalWrite(RIGHT_MOTOR_PIN2, LOW);
  analogWrite(LEFT_MOTOR_ENABLE, MOTOR_SPEED);
  analogWrite(RIGHT_MOTOR_ENABLE, MOTOR_SPEED);
}

void moveBackward() {
  digitalWrite(LEFT_MOTOR_PIN1, LOW);
  digitalWrite(LEFT_MOTOR_PIN2, HIGH);
  digitalWrite(RIGHT_MOTOR_PIN1, LOW);
  digitalWrite(RIGHT_MOTOR_PIN2, HIGH);
  analogWrite(LEFT_MOTOR_ENABLE, MOTOR_SPEED);
  analogWrite(RIGHT_MOTOR_ENABLE, MOTOR_SPEED);
}

void turnLeft() {
  digitalWrite(LEFT_MOTOR_PIN1, LOW);
  digitalWrite(LEFT_MOTOR_PIN2, HIGH);
  digitalWrite(RIGHT_MOTOR_PIN1, HIGH);
  digitalWrite(RIGHT_MOTOR_PIN2, LOW);
  analogWrite(LEFT_MOTOR_ENABLE, MOTOR_SPEED);
  analogWrite(RIGHT_MOTOR_ENABLE, MOTOR_SPEED);
  delay(TURN_DELAY);
  stopMotors();
}

void turnRight() {
  digitalWrite(LEFT_MOTOR_PIN1, HIGH);
  digitalWrite(LEFT_MOTOR_PIN2, LOW);
  digitalWrite(RIGHT_MOTOR_PIN1, LOW);
  digitalWrite(RIGHT_MOTOR_PIN2, HIGH);
  analogWrite(LEFT_MOTOR_ENABLE, MOTOR_SPEED);
  analogWrite(RIGHT_MOTOR_ENABLE, MOTOR_SPEED);
  delay(TURN_DELAY);
  stopMotors();
}

void stopMotors() {
  digitalWrite(LEFT_MOTOR_PIN1, LOW);
  digitalWrite(LEFT_MOTOR_PIN2, LOW);
  digitalWrite(RIGHT_MOTOR_PIN1, LOW);
  digitalWrite(RIGHT_MOTOR_PIN2, LOW);
  analogWrite(LEFT_MOTOR_ENABLE, 0);
  analogWrite(RIGHT_MOTOR_ENABLE, 0);
}

// Optional: Servo scanning function for enhanced obstacle detection
void scanEnvironment() {
  int distances[5];
  int angles[] = {0, 45, 90, 135, 180};
  
  for (int i = 0; i < 5; i++) {
    sensorServo.write(angles[i]);
    delay(300);
    distances[i] = getDistance(TRIG_PIN_FRONT, ECHO_PIN_FRONT);
    Serial.print("Angle ");
    Serial.print(angles[i]);
    Serial.print(": ");
    Serial.print(distances[i]);
    Serial.println(" cm");
  }
  
  // Return servo to center position
  sensorServo.write(90);
  delay(300);
}
