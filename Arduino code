# Obstacle Sensing Robot
  An autonomous robot that detects and avoids obstacles using ultrasonic sensors
  Authors: Roshni N Kumar, Roshan Jogi A S, Sumanth N M
  Supervisor: Prof. Ashwini C
  Institution: Sapthagiri College of Engineering
  Academic Year: 2022-2023
 


#include <Servo.h>

// Pin definitions for ultrasonic sensor (only one now)
#define TRIG_PIN 2
#define ECHO_PIN 3

// Pin definitions for motors (using L298N/L293D)
#define LEFT_MOTOR_PIN1 8
#define LEFT_MOTOR_PIN2 9
#define RIGHT_MOTOR_PIN1 10
#define RIGHT_MOTOR_PIN2 11
#define LEFT_MOTOR_ENABLE 12
#define RIGHT_MOTOR_ENABLE 13

// Servo motor for rotating ultrasonic sensor
#define SERVO_PIN 7
Servo sensorServo;

// Config
const int THRESHOLD_DISTANCE = 20; // cm
const int MOTOR_SPEED = 200;       // 0â€“255
const int TURN_DELAY = 500;        // ms
const int SCAN_DELAY = 200;        // ms (servo settle)

// Globals
int frontDistance = 0;
int leftDistance = 0;
int rightDistance = 0;

void setup() {
  Serial.begin(9600);

  // Ultrasonic pins
  pinMode(TRIG_PIN, OUTPUT);
  pinMode(ECHO_PIN, INPUT);

  // Motor pins
  pinMode(LEFT_MOTOR_PIN1, OUTPUT);
  pinMode(LEFT_MOTOR_PIN2, OUTPUT);
  pinMode(RIGHT_MOTOR_PIN1, OUTPUT);
  pinMode(RIGHT_MOTOR_PIN2, OUTPUT);
  pinMode(LEFT_MOTOR_ENABLE, OUTPUT);
  pinMode(RIGHT_MOTOR_ENABLE, OUTPUT);

  // Servo
  sensorServo.attach(SERVO_PIN);
  sensorServo.write(90); // Center
  delay(1000);

  Serial.println("Robot Initialized with 1 Ultrasonic + Servo");
}

void loop() {
  // Scan three directions with servo
  sensorServo.write(30); // Left
  delay(SCAN_DELAY);
  leftDistance = getDistance();

  sensorServo.write(90); // Center
  delay(SCAN_DELAY);
  frontDistance = getDistance();

  sensorServo.write(150); // Right
  delay(SCAN_DELAY);
  rightDistance = getDistance();

  Serial.print("L: "); Serial.print(leftDistance);
  Serial.print(" cm, F: "); Serial.print(frontDistance);
  Serial.print(" cm, R: "); Serial.print(rightDistance);
  Serial.println(" cm");

  // Decision logic
  if (frontDistance > THRESHOLD_DISTANCE) {
    moveForward();
    Serial.println("Moving forward");
  } else {
    stopMotors();
    delay(200);

    if (leftDistance > rightDistance && leftDistance > THRESHOLD_DISTANCE) {
      turnLeft();
      Serial.println("Turning left");
    } else if (rightDistance > leftDistance && rightDistance > THRESHOLD_DISTANCE) {
      turnRight();
      Serial.println("Turning right");
    } else {
      moveBackward();
      delay(500);
      turnRight(); // default turn
      Serial.println("Blocked both sides - reversing");
    }
  }
  delay(100);
}

// Ultrasonic function
int getDistance() {
  long duration;
  int distance;

  digitalWrite(TRIG_PIN, LOW);
  delayMicroseconds(2);
  digitalWrite(TRIG_PIN, HIGH);
  delayMicroseconds(10);
  digitalWrite(TRIG_PIN, LOW);

  duration = pulseIn(ECHO_PIN, HIGH, 30000); // 30 ms timeout
  distance = duration * 0.034 / 2;

  if (distance > 400 || distance < 2) return 400; // out of range
  return distance;
}

// Motor functions
void moveForward() {
  digitalWrite(LEFT_MOTOR_PIN1, HIGH);
  digitalWrite(LEFT_MOTOR_PIN2, LOW);
  digitalWrite(RIGHT_MOTOR_PIN1, HIGH);
  digitalWrite(RIGHT_MOTOR_PIN2, LOW);
  analogWrite(LEFT_MOTOR_ENABLE, MOTOR_SPEED);
  analogWrite(RIGHT_MOTOR_ENABLE, MOTOR_SPEED);
}

void moveBackward() {
  digitalWrite(LEFT_MOTOR_PIN1, LOW);
  digitalWrite(LEFT_MOTOR_PIN2, HIGH);
  digitalWrite(RIGHT_MOTOR_PIN1, LOW);
  digitalWrite(RIGHT_MOTOR_PIN2, HIGH);
  analogWrite(LEFT_MOTOR_ENABLE, MOTOR_SPEED);
  analogWrite(RIGHT_MOTOR_ENABLE, MOTOR_SPEED);
}

void turnLeft() {
  digitalWrite(LEFT_MOTOR_PIN1, LOW);
  digitalWrite(LEFT_MOTOR_PIN2, HIGH);
  digitalWrite(RIGHT_MOTOR_PIN1, HIGH);
  digitalWrite(RIGHT_MOTOR_PIN2, LOW);
  analogWrite(LEFT_MOTOR_ENABLE, MOTOR_SPEED);
  analogWrite(RIGHT_MOTOR_ENABLE, MOTOR_SPEED);
  delay(TURN_DELAY);
  stopMotors();
}

void turnRight() {
  digitalWrite(LEFT_MOTOR_PIN1, HIGH);
  digitalWrite(LEFT_MOTOR_PIN2, LOW);
  digitalWrite(RIGHT_MOTOR_PIN1, LOW);
  digitalWrite(RIGHT_MOTOR_PIN2, HIGH);
  analogWrite(LEFT_MOTOR_ENABLE, MOTOR_SPEED);
  analogWrite(RIGHT_MOTOR_ENABLE, MOTOR_SPEED);
  delay(TURN_DELAY);
  stopMotors();
}

void stopMotors() {
  analogWrite(LEFT_MOTOR_ENABLE, 0);
  analogWrite(RIGHT_MOTOR_ENABLE, 0);
}
